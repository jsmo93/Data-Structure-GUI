#lang racket

(require racket/gui)
(require racket/draw)

(provide data)
(define data-target (make-bitmap 55 40))
(define data-dc (new bitmap-dc% [bitmap data-target]))
(define data
  (let ([p (new dc-path%)])
    (send p move-to 0 0)
    (send p line-to 15 0)
    (send p line-to 15 15)
    (send p line-to 0 15)
    (send p line-to 0 0)
    (send p close)
    p))

(provide double-box)
(define double-box-target (make-bitmap 55 40))
(define double-box-dc (new bitmap-dc% [bitmap double-box-target]))
(define double-box
  (let ([p (new dc-path%)])
    (send p move-to 0 0)
    (send p line-to 30 0)
    (send p line-to 30 15)
    (send p line-to 0 15)
    (send p move-to 15 0)
    (send p line-to 15 15)
    (send p close)
    p))

(provide wide-box)
(define wide-box-target (make-bitmap 55 40))
(define wide-box-dc (new bitmap-dc% [bitmap wide-box-target]))
(define wide-box
  (let ([p (new dc-path%)])
    (send p move-to 0 0)
    (send p line-to 30 0)
    (send p line-to 30 15)
    (send p line-to 0 15)
    (send p close)
    p))

(provide down-arrow)
(define down-arrow-target (make-bitmap 55 40))
(define down-arrow-dc (new bitmap-dc% [bitmap down-arrow-target]))
(define down-arrow
  (let ([p (new dc-path%)])
    (send p move-to 7 7)
    (send p line-to 7 39)
    (send p move-to 7 39)
    (send p line-to 12 29)
    (send p move-to 7 39)
    (send p line-to 2 29)
    (send p close)
    p))

(provide right-arrow)
(define right-arrow-target (make-bitmap 55 40))
(define right-arrow-dc (new bitmap-dc% [bitmap right-arrow-target]))
(define right-arrow
  (let ([p (new dc-path%)])
    (send p move-to 23 7)
    (send p line-to 54 7)
    (send p move-to 54 7)
    (send p line-to 44 12)
    (send p move-to 54 7)
    (send p line-to 44 2)
    (send p close)
    p))

(provide node)
(define node-target (make-bitmap 55 40))
(define node-dc (new bitmap-dc% [bitmap node-target]))
(define node
  (let ([p (new dc-path%)])
    (send p append double-box)
    (send p append down-arrow)
    (send p append right-arrow)
    (send p close)
    p))

(provide terminal-node)
(define terminal-node-target (make-bitmap 55 40))
(define terminal-node-dc (new bitmap-dc% [bitmap terminal-node-target]))
(define terminal-node
  (let ([p (new dc-path%)])
    (send p append double-box)
    (send p move-to 15 0)
    (send p line-to 30 15)
    (send p append down-arrow)
    (send p close)
    p))

(provide bypass-node)
(define bypass-node-target (make-bitmap 55 40))
(define bypass-node-dc (new bitmap-dc% [bitmap bypass-node-target]))
(define bypass-node
  (let ([p (new dc-path%)])
    (send p append double-box)
    (send p move-to 0 0)
    (send p line-to 15 15)
    (send p append right-arrow)
    (send p close)
    p))

(provide spacer)
(define spacer-target (make-bitmap 55 40))
(define spacer-dc (new bitmap-dc% [bitmap spacer-target]))
(define spacer
  (let ([p (new dc-path%)])
    (send p append wide-box)
    (send p append right-arrow)
    (send p close)
    p))

(provide null-node)
(define null-node-target (make-bitmap 55 40))
(define null-node-dc (new bitmap-dc% [bitmap null-node-target]))
(define null-node
  (let ([p (new dc-path%)])
    (send p append double-box)
    (send p move-to 0 0)
    (send p line-to 15 15)
    (send p move-to 15 0)
    (send p line-to 30 15)
    (send p close)
    p))

(provide enclosure)
(define enclosure-target (make-bitmap 55 40))
(define enclosure-dc (new bitmap-dc% [bitmap enclosure-target]))
(define enclosure
  (let ([p (new dc-path%)])
    (send p move-to 0 0)
    (send p line-to 54 0)
    (send p line-to 54 39)
    (send p line-to 0 39)
    (send p line-to 0 0)
    (send p close)
    p))